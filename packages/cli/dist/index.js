#! /usr/bin/env node
var O=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as W}from"commander";import M from"chalk-animation";var _=new W().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=M.rainbow(O);setTimeout(()=>{e.stop()},5e3)});import{z as r}from"zod";var J=r.object({name:r.string(),dependencies:r.array(r.string()).optional(),devDependencies:r.array(r.string()).optional(),uiDependencies:r.array(r.string()).optional(),registryDependencies:r.array(r.string()).optional(),files:r.array(r.string()),type:r.enum(["components:ui","components:component","components:example","components:library"])}),h=r.array(J),L=J.extend({files:r.array(r.object({name:r.string(),content:r.string()}))}),Ce=r.array(L);import f from"fs";import y from"path";var k="@/components/ui/trnsprncy",u=y.join(process.cwd(),"components.json");function b(){return f.existsSync(u)?JSON.parse(f.readFileSync(u,"utf-8")):{}}var $=y.join(process.cwd(),"tsconfig.json");function Y(){return f.existsSync($)?JSON.parse(f.readFileSync($,"utf-8")):{}}function x(){try{let n=Y().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var E=e=>{f.mkdir(e,{recursive:!0},n=>{n&&console.error("Error creating directory:",n)})},w={true:y.join(process.cwd(),"/src",k.replace("@","")),false:y.join(process.cwd(),k.replace("@",""))};import K from"fs";import{HttpsProxyAgent as Q}from"https-proxy-agent";import I from"node-fetch";import X from"path";var Z="https://raw.githubusercontent.com/trnsprncy/ui/main",T=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",ee=process.env.https_proxy?new Q(process.env.https_proxy):void 0;async function R(){try{return await(await I(`${T}/registry/index.json`,{agent:ee})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${T}.`)}}async function j(e){let n=h.parse(await R());e||(console.log("no components selected"),process.exit(1));let t=[];for(let o of e){let s=n.find(i=>i.name===o);if(s)t.push(s);else{console.log(`Component ${o} not found in registry`);continue}if(s.registryDependencies){let i=await j(s.registryDependencies);t.push(...i)}}return t}async function q(e){try{let n=[],t=[];for(let o of e){let s=`${Z}/packages/site/src/registry/alpha/${o}`,i=o.substring(o.lastIndexOf("/")+1),a=await I(s);if(!a.ok)throw new Error(`Failed to fetch file '${o}': ${a.statusText}`);let c=await a.text();n.push(i),t.push(c)}return{filenames:n,contents:t}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function A(e,n){let t=x()?"true":"false",o=w[t];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((s,i)=>{let a=X.join(o,s);K.writeFileSync(a,n[i],"utf8")})}catch(s){console.error("Error creating files:",s)}}import P from"chalk";import{Command as ne}from"commander";import F from"ora";import D from"prompts";import{z as l}from"zod";var te={info:e=>P.cyan.underline(e),success:e=>P.greenBright(e),error:e=>P.redBright(e),warning:e=>P.yellowBright(e)},oe=l.object({components:l.array(l.string()).optional(),yes:l.boolean(),overwrite:l.boolean(),cwd:l.string(),all:l.boolean(),path:l.string().optional()}),V=new ne().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let t=oe.parse({components:e,...n}),o=h.parse(await R()),s=t.all?o.map(c=>c.name):t.components;if(!t.components?.length){let{components:c}=await D({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:o.map(d=>({title:d.name,value:d.name,selected:t.all?!0:t.components?.includes(d.name)}))});s=c}s?.length||(F(te.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let i=await j(s);if(!t.yes){let{proceed:c}=await D({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});c||process.exit(0)}let a=F("Installing components...").start();for(let c of i){a.text=`Installing ${c.name}...`;let d=await q(c.files);A(d.filenames,d.contents)}process.exit(0)});import re from"figlet";function z(e){let n=re.textSync(e,{font:"Small"});console.log(`
${n}
`)}import S from"chalk";import{Command as se}from"commander";import v from"fs";import p from"ora";import ie from"path";import ae from"prompts";import*as C from"semver";var m={info:e=>S.blueBright(e),success:e=>S.greenBright(e),error:e=>S.redBright(e),warning:e=>S.yellowBright(e)},ce=`
  this alias will be added to your ${m.success("components.json")} file

    ${m.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,g={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${m.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${m.success("components.json")}.${ce}  Proceed?`,configurationWritten:`Configuration written to ${m.success("components.json")}.`,operationAborted:`${m.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${m.success("components.json")} file in your project root is required before running this command`},pe=()=>{let e=b();return e?.aliases||(p(g.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},G=new se().name("init").description(g.greet).action(()=>{z("Initializing:"),pe()&&(p(`trnsprncy alias already exists in ${m.success("components.json")}`).fail(),process.exit(1)),le().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(p(m.error(g.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(p(g.meetsRequirements).succeed(),ge())}).catch(e=>{p(`Error checking required packages: ${e}`).fail()})}),H=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),N={next:"^14.0.1"};async function me(){let e=ie.join(process.cwd(),"package.json"),n=JSON.parse(v.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let t in n.dependencies)n.dependencies[t]=H(n.dependencies[t]);return n.dependencies}async function ge(){let{confirmation:e}=await ae({type:"toggle",name:"confirmation",message:g.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){v.existsSync(u)||(p(g.shadcnRequired).fail(),process.exit(1));let n=b();n.aliases.trnsprncy=k,v.writeFileSync(u,JSON.stringify(n,null,2));let t=x()?"true":"false",o=w[t];E(o),p(g.configurationWritten).succeed()}else p(g.operationAborted).fail()}async function le(){let e=await me();if(!Object.keys(e)?.length)return p(g.noDependencies).fail(),{missingPackages:Object.keys(N),outdatedPackages:[]};let n=[],t=[];p("checking for required packages...").succeed();for(let o in N){let s=e[o];if(!s)n.push(o);else{let i=H(N[o]),a=s;a||n.push(o),!C.satisfies(a,i)&&C.lt(a,i)&&t.push({packageName:o,installedVersion:a,requiredVersion:i})}}return{missingPackages:n,outdatedPackages:t}}import de from"fs";import B from"path";import{fileURLToPath as fe}from"url";var ue=B.dirname(fe(import.meta.url)),U={getContent(){let e=B.resolve(ue,"../","package.json");return JSON.parse(de.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as he}from"commander";(async()=>{let e=new he;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(U.version,"-v, --version","display the version number"),e.addCommand(G).addCommand(V).addCommand(_),e.parse()})();
