#! /usr/bin/env node
var O=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as Q}from"commander";import X from"chalk-animation";var _=new Q().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=X.rainbow(O);setTimeout(()=>{e.stop()},5e3)});import{z as a}from"zod";var E=a.object({name:a.string(),dependencies:a.array(a.string()).optional(),devDependencies:a.array(a.string()).optional(),uiDependencies:a.array(a.string()).optional(),registryDependencies:a.array(a.string()).optional(),files:a.array(a.string()),type:a.enum(["components:ui","components:component","components:example","components:library"])}),y=a.array(E),Z=E.extend({files:a.array(a.object({name:a.string(),content:a.string()}))}),Ne=a.array(Z);import{detect as ee}from"@antfu/ni";async function J(e){let n=await ee({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}import w from"fs";import x from"path";var k="@/components/ui/trnsprncy",h=x.join(process.cwd(),"components.json");function R(){return w.existsSync(h)?JSON.parse(w.readFileSync(h,"utf-8")):{}}var T=x.join(process.cwd(),"tsconfig.json");function ne(){return w.existsSync(T)?JSON.parse(w.readFileSync(T,"utf-8")):{}}function P(){try{let n=ne().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var S={true:x.join(process.cwd(),"/src",k.replace("@","")),false:x.join(process.cwd(),k.replace("@",""))};import te from"fs";import{HttpsProxyAgent as oe}from"https-proxy-agent";import A from"node-fetch";import re from"path";var se="https://raw.githubusercontent.com/trnsprncy/ui/main",q=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",ie=process.env.https_proxy?new oe(process.env.https_proxy):void 0;async function $(){try{return await(await A(`${q}/registry/index.json`,{agent:ie})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${q}.`)}}async function F(e){let n=y.parse(await $());e||(console.log("No components selected"),process.exit(1));let r=[],t=new Set;async function p(s){let i=[];for(let c of s){if(t.has(c))continue;let o=n.find(m=>m.name===c);if(!o){console.log(`Dependency ${c} not found in registry`);continue}if(t.add(c),i.push(o),o.registryDependencies){let m=await p(o.registryDependencies);i.push(...m)}}return i}for(let s of e){let i=n.find(c=>c.name===s);if(!i){console.log(`Component ${s} not found in registry`);continue}if(!t.has(s)&&(r.push(i),t.add(s),i.registryDependencies)){let c=await p(i.registryDependencies);r.push(...c)}}return r}async function z(e){try{let n=[],r=[];for(let t of e){let p=`${se}/packages/site/src/registry/alpha/${t}`,s=t.substring(t.lastIndexOf("/")+1),i=await A(p);if(!i.ok)throw new Error(`Failed to fetch file '${t}': ${i.statusText}`);let c=await i.text();n.push(s),r.push(c)}return{filenames:n,contents:r}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function M(e,n){let r=P()?"true":"false",t=S[r];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((p,s)=>{let i=re.join(t,p);te.writeFileSync(i,n[s],"utf8")})}catch(p){console.error("Error creating files:",p)}}import C from"chalk";import{Command as ae}from"commander";import{execa as v}from"execa";import V from"ora";import ce from"path";import N from"prompts";import{z as f}from"zod";var pe={info:e=>C.cyan.underline(e),success:e=>C.greenBright(e),error:e=>C.redBright(e),warning:e=>C.yellowBright(e)},me=f.object({components:f.array(f.string()).optional(),yes:f.boolean(),overwrite:f.boolean(),cwd:f.string(),all:f.boolean(),path:f.string().optional()}),G=new ae().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let r=me.parse({components:e,...n}),t=ce.resolve(r.cwd),p=y.parse(await $()),s=r.all?p.map(o=>o.name):r.components;if(!r.components?.length){let{components:o}=await N({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:p.map(m=>({title:m.name,value:m.name,selected:r.all?!0:r.components?.includes(m.name)}))});s=o}s?.length||(V(pe.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let i=await F(s);if(!r.yes){let{proceed:o}=await N({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});o||process.exit(0)}let c=V("Installing components...").start();for(let o of i){c.text=`Installing ${o.name}...`;let m=await J(t);if(o.uiDependencies?.length){c.stop();let{proceed:K}=await N({type:"confirm",name:"proceed",message:`to install ${o.name} you need (${o.uiDependencies.join(", ")}). Proceed?`,initial:!0});K?(c.start(`installing ${o.uiDependencies.join(", ")} for ${o.name}...`),await v("npx",["shadcn-ui@latest","add",...o.uiDependencies,"--overwrite"],{cwd:t}),c.text=`Installing ${o.name}...`):(c.fail(`you need (${o.uiDependencies.join(", ")}) for ${o.name}!`),process.exit(0))}o.dependencies?.length&&await v(m,[m==="npm"?"install":"add",...o.dependencies],{cwd:t}),o.devDependencies?.length&&await v(m,[m==="npm"?"install":"add","-D",...o.devDependencies],{cwd:t});let I=await z(o.files);M(I.filenames,I.contents)}c.succeed("Done."),process.exit(0)});import de from"figlet";function H(e){let n=de.textSync(e,{font:"Small"});console.log(`
${n}
`)}import b from"chalk";import{Command as ge}from"commander";import u from"fs";import d from"ora";import B from"path";import le from"prompts";import*as j from"semver";var g={info:e=>b.blueBright(e),success:e=>b.greenBright(e),error:e=>b.redBright(e),warning:e=>b.yellowBright(e)},fe=`
  this alias will be added to your ${g.success("components.json")} file

    ${g.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,l={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${g.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${g.success("components.json")}.${fe}  Proceed?`,configurationWritten:`Configuration written to ${g.success("components.json")}.`,operationAborted:`${g.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${g.success("components.json")} file in your project root is required before running this command`},ue=()=>{let e=R();return e?.aliases||(d(l.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},U=new ge().name("init").description(l.greet).action(()=>{H("Initializing:"),ue()&&(d(`trnsprncy alias already exists in ${g.success("components.json")}`).fail(),process.exit(1)),we().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(d(g.error(l.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(d(l.meetsRequirements).succeed(),ye())}).catch(e=>{d(`Error checking required packages: ${e}`).fail()})}),W=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),D={next:"^14.0.1"};async function he(){let e=B.join(process.cwd(),"package.json"),n=JSON.parse(u.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let r in n.dependencies)n.dependencies[r]=W(n.dependencies[r]);return n.dependencies}async function ye(){let{confirmation:e}=await le({type:"toggle",name:"confirmation",message:l.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){u.existsSync(h)||(d(l.shadcnRequired).fail(),process.exit(1));let n=R();n.aliases.trnsprncy=k,u.writeFileSync(h,JSON.stringify(n,null,2));let r=P()?"true":"false",t=S[r];u.existsSync(t)||u.mkdirSync(t,{recursive:!0}),console.log(t);let p=B.join(t,".gitkeep");u.writeFile(p,"",s=>{s&&console.error("Error writing file:",s)}),d(l.configurationWritten).succeed()}else d(l.operationAborted).fail()}async function we(){let e=await he();if(!Object.keys(e)?.length)return d(l.noDependencies).fail(),{missingPackages:Object.keys(D),outdatedPackages:[]};let n=[],r=[];d("checking for required packages...").succeed();for(let t in D){let p=e[t];if(!p)n.push(t);else{let s=W(D[t]),i=p;i||n.push(t),!j.satisfies(i,s)&&j.lt(i,s)&&r.push({packageName:t,installedVersion:i,requiredVersion:s})}}return{missingPackages:n,outdatedPackages:r}}import xe from"fs";import L from"path";import{fileURLToPath as ke}from"url";var Pe=L.dirname(ke(import.meta.url)),Y={getContent(){let e=L.resolve(Pe,"../","package.json");return JSON.parse(xe.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as Se}from"commander";(async()=>{let e=new Se;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(Y.version,"-v, --version","display the version number"),e.addCommand(U).addCommand(G).addCommand(_),e.parse()})();
