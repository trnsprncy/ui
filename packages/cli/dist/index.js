#! /usr/bin/env node
var O=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as Q}from"commander";import X from"chalk-animation";var _=new Q().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=X.rainbow(O);setTimeout(()=>{e.stop()},5e3)});import{z as i}from"zod";var J=i.object({name:i.string(),dependencies:i.array(i.string()).optional(),devDependencies:i.array(i.string()).optional(),uiDependencies:i.array(i.string()).optional(),registryDependencies:i.array(i.string()).optional(),files:i.array(i.string()),type:i.enum(["components:ui","components:component","components:example","components:library"])}),y=i.array(J),Z=J.extend({files:i.array(i.object({name:i.string(),content:i.string()}))}),De=i.array(Z);import{detect as ee}from"@antfu/ni";async function E(e){let n=await ee({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}import u from"fs";import w from"path";var x="@/components/ui/trnsprncy",h=w.join(process.cwd(),"components.json");function j(){return u.existsSync(h)?JSON.parse(u.readFileSync(h,"utf-8")):{}}var T=w.join(process.cwd(),"tsconfig.json");function ne(){return u.existsSync(T)?JSON.parse(u.readFileSync(T,"utf-8")):{}}function k(){try{let n=ne().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var q=e=>{u.mkdir(e,{recursive:!0},n=>{n&&console.error("Error creating directory:",n)})},P={true:w.join(process.cwd(),"/src",x.replace("@","")),false:w.join(process.cwd(),x.replace("@",""))};import te from"fs";import{HttpsProxyAgent as oe}from"https-proxy-agent";import F from"node-fetch";import re from"path";var se="https://raw.githubusercontent.com/trnsprncy/ui/main",A=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",ie=process.env.https_proxy?new oe(process.env.https_proxy):void 0;async function R(){try{return await(await F(`${A}/registry/index.json`,{agent:ie})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${A}.`)}}async function z(e){let n=y.parse(await R());e||(console.log("No components selected"),process.exit(1));let o=[],r=new Set;async function p(a){let s=[];for(let c of a){if(r.has(c))continue;let t=n.find(m=>m.name===c);if(!t){console.log(`Dependency ${c} not found in registry`);continue}if(r.add(c),s.push(t),t.registryDependencies){let m=await p(t.registryDependencies);s.push(...m)}}return s}for(let a of e){let s=n.find(c=>c.name===a);if(!s){console.log(`Component ${a} not found in registry`);continue}if(!r.has(a)&&(o.push(s),r.add(a),s.registryDependencies)){let c=await p(s.registryDependencies);o.push(...c)}}return o}async function M(e){try{let n=[],o=[];for(let r of e){let p=`${se}/packages/site/src/registry/alpha/${r}`,a=r.substring(r.lastIndexOf("/")+1),s=await F(p);if(!s.ok)throw new Error(`Failed to fetch file '${r}': ${s.statusText}`);let c=await s.text();n.push(a),o.push(c)}return{filenames:n,contents:o}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function V(e,n){let o=k()?"true":"false",r=P[o];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((p,a)=>{let s=re.join(r,p);te.writeFileSync(s,n[a],"utf8")})}catch(p){console.error("Error creating files:",p)}}import S from"chalk";import{Command as ae}from"commander";import{execa as $}from"execa";import G from"ora";import ce from"path";import v from"prompts";import{z as f}from"zod";var pe={info:e=>S.cyan.underline(e),success:e=>S.greenBright(e),error:e=>S.redBright(e),warning:e=>S.yellowBright(e)},me=f.object({components:f.array(f.string()).optional(),yes:f.boolean(),overwrite:f.boolean(),cwd:f.string(),all:f.boolean(),path:f.string().optional()}),H=new ae().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let o=me.parse({components:e,...n}),r=ce.resolve(o.cwd),p=y.parse(await R()),a=o.all?p.map(t=>t.name):o.components;if(!o.components?.length){let{components:t}=await v({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:p.map(m=>({title:m.name,value:m.name,selected:o.all?!0:o.components?.includes(m.name)}))});a=t}a?.length||(G(pe.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let s=await z(a);if(!o.yes){let{proceed:t}=await v({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});t||process.exit(0)}let c=G("Installing components...").start();for(let t of s){c.text=`Installing ${t.name}...`;let m=await E(r);if(t.uiDependencies?.length){c.stop();let{proceed:K}=await v({type:"confirm",name:"proceed",message:`to install ${t.name} you need (${t.uiDependencies.join(", ")}). Proceed?`,initial:!0});K?(c.start(`installing ${t.uiDependencies.join(", ")} for ${t.name}...`),await $("npx",["shadcn-ui@latest","add",...t.uiDependencies,"--overwrite"],{cwd:r}),c.text=`Installing ${t.name}...`):(c.fail(`you need (${t.uiDependencies.join(", ")}) for ${t.name}!`),process.exit(0))}t.dependencies?.length&&await $(m,[m==="npm"?"install":"add",...t.dependencies],{cwd:r}),t.devDependencies?.length&&await $(m,[m==="npm"?"install":"add","-D",...t.devDependencies],{cwd:r});let I=await M(t.files);V(I.filenames,I.contents)}c.succeed("Done."),process.exit(0)});import de from"figlet";function B(e){let n=de.textSync(e,{font:"Small"});console.log(`
${n}
`)}import C from"chalk";import{Command as ge}from"commander";import D from"fs";import d from"ora";import le from"path";import fe from"prompts";import*as b from"semver";var g={info:e=>C.blueBright(e),success:e=>C.greenBright(e),error:e=>C.redBright(e),warning:e=>C.yellowBright(e)},ue=`
  this alias will be added to your ${g.success("components.json")} file

    ${g.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,l={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${g.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${g.success("components.json")}.${ue}  Proceed?`,configurationWritten:`Configuration written to ${g.success("components.json")}.`,operationAborted:`${g.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${g.success("components.json")} file in your project root is required before running this command`},he=()=>{let e=j();return e?.aliases||(d(l.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},U=new ge().name("init").description(l.greet).action(()=>{B("Initializing:"),he()&&(d(`trnsprncy alias already exists in ${g.success("components.json")}`).fail(),process.exit(1)),xe().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(d(g.error(l.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(d(l.meetsRequirements).succeed(),we())}).catch(e=>{d(`Error checking required packages: ${e}`).fail()})}),W=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),N={next:"^14.0.1"};async function ye(){let e=le.join(process.cwd(),"package.json"),n=JSON.parse(D.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let o in n.dependencies)n.dependencies[o]=W(n.dependencies[o]);return n.dependencies}async function we(){let{confirmation:e}=await fe({type:"toggle",name:"confirmation",message:l.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){D.existsSync(h)||(d(l.shadcnRequired).fail(),process.exit(1));let n=j();n.aliases.trnsprncy=x,D.writeFileSync(h,JSON.stringify(n,null,2));let o=k()?"true":"false",r=P[o];q(r),d(l.configurationWritten).succeed()}else d(l.operationAborted).fail()}async function xe(){let e=await ye();if(!Object.keys(e)?.length)return d(l.noDependencies).fail(),{missingPackages:Object.keys(N),outdatedPackages:[]};let n=[],o=[];d("checking for required packages...").succeed();for(let r in N){let p=e[r];if(!p)n.push(r);else{let a=W(N[r]),s=p;s||n.push(r),!b.satisfies(s,a)&&b.lt(s,a)&&o.push({packageName:r,installedVersion:s,requiredVersion:a})}}return{missingPackages:n,outdatedPackages:o}}import ke from"fs";import L from"path";import{fileURLToPath as Pe}from"url";var Se=L.dirname(Pe(import.meta.url)),Y={getContent(){let e=L.resolve(Se,"../","package.json");return JSON.parse(ke.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as Ce}from"commander";(async()=>{let e=new Ce;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(Y.version,"-v, --version","display the version number"),e.addCommand(U).addCommand(H).addCommand(_),e.parse()})();
