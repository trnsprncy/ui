#! /usr/bin/env node
var _=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as ee}from"commander";import ne from"chalk-animation";var J=new ee().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=ne.rainbow(_);setTimeout(()=>{e.stop()},5e3)});import{z as a}from"zod";var T=a.object({name:a.string(),dependencies:a.array(a.string()).optional(),devDependencies:a.array(a.string()).optional(),uiDependencies:a.array(a.string()).optional(),registryDependencies:a.array(a.string()).optional(),files:a.array(a.string()),type:a.enum(["components:ui","components:component","components:example","components:library"])}),P=a.array(T),te=T.extend({files:a.array(a.object({name:a.string(),content:a.string()}))}),Ie=a.array(te);import S from"fs";import C from"path";var b="@/components/ui/trnsprncy",x=C.join(process.cwd(),"components.json");function v(){return S.existsSync(x)?JSON.parse(S.readFileSync(x,"utf-8")):{}}var q=C.join(process.cwd(),"tsconfig.json");function oe(){return S.existsSync(q)?JSON.parse(S.readFileSync(q,"utf-8")):{}}function y(){try{let n=oe().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var w={true:C.join(process.cwd(),"/src",b.replace("@","")),false:C.join(process.cwd(),b.replace("@",""))};import{detect as re}from"@antfu/ni";async function A(e){let n=await re({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}import se from"fs";import{HttpsProxyAgent as ie}from"https-proxy-agent";import z from"node-fetch";import ae from"path";var ce="https://raw.githubusercontent.com/trnsprncy/ui/main",F=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",pe=process.env.https_proxy?new ie(process.env.https_proxy):void 0;async function N(){try{return await(await z(`${F}/registry/index.json`,{agent:pe})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${F}.`)}}async function M(e){let n=P.parse(await N());e||(console.log("No components selected"),process.exit(1));let o=[],t=new Set;async function c(s){let i=[];for(let p of s){if(t.has(p))continue;let h=n.find(m=>m.name===p);if(!h){console.log(`Dependency ${p} not found in registry`);continue}if(t.add(p),i.push(h),h.registryDependencies){let m=await c(h.registryDependencies);i.push(...m)}}return i}for(let s of e){let i=n.find(p=>p.name===s);if(!i){console.log(`Component ${s} not found in registry`);continue}if(!t.has(s)&&(o.push(i),t.add(s),i.registryDependencies)){let p=await c(i.registryDependencies);o.push(...p)}}return o}async function V(e){try{let n=[],o=[];for(let t of e){let c=`${ce}/packages/site/src/registry/alpha/${t}`,s=t.substring(t.lastIndexOf("/")+1),i=await z(c);if(!i.ok)throw new Error(`Failed to fetch file '${t}': ${i.statusText}`);let p=await i.text();n.push(s),o.push(p)}return{filenames:n,contents:o}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function G(e,n){let o=y()?"true":"false",t=w[o];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((c,s)=>{let i=ae.join(t,c);se.writeFileSync(i,n[s],"utf8")})}catch(c){console.error("Error creating files:",c)}}import j from"chalk";import{Command as me}from"commander";import H from"fs";import{execa as D}from"execa";import B from"ora";import de from"path";import E from"prompts";import{z as u}from"zod";var ge={info:e=>j.cyan.underline(e),success:e=>j.greenBright(e),error:e=>j.redBright(e),warning:e=>j.yellowBright(e)},le=u.object({components:u.array(u.string()).optional(),yes:u.boolean(),overwrite:u.boolean(),cwd:u.string(),all:u.boolean(),path:u.string().optional()}),U=new me().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let o=le.parse({components:e,...n}),t=de.resolve(o.cwd),c=P.parse(await N()),s=o.all?c.map(r=>r.name):o.components;if(!o.components?.length){let{components:r}=await E({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:c.map(f=>({title:f.name,value:f.name,selected:o.all?!0:o.components?.includes(f.name)}))});s=r}s?.length||(B(ge.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let i=await M(s);if(!o.yes){let{proceed:r}=await E({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});r||process.exit(0)}let p=y()?"true":"false",h=w[p];H.existsSync(h+"/.gitkeep")&&H.unlink(h+"/.gitkeep",r=>{r&&console.error("Error deleting file:",r)});let m=B("Installing components...").start();for(let r of i){m.text=`Installing ${r.name}...`;let f=await A(t);if(r.uiDependencies?.length){m.stop();let{proceed:Z}=await E({type:"confirm",name:"proceed",message:`to install ${r.name} you need (${r.uiDependencies.join(", ")}). Proceed?`,initial:!0});Z?(m.start(`installing ${r.uiDependencies.join(", ")} for ${r.name}...`),await D("npx",["shadcn-ui@latest","add",...r.uiDependencies,"--overwrite"],{cwd:t}),m.text=`Installing ${r.name}...`):(m.fail(`you need (${r.uiDependencies.join(", ")}) for ${r.name}!`),process.exit(0))}r.dependencies?.length&&await D(f,[f==="npm"?"install":"add",...r.dependencies],{cwd:t}),r.devDependencies?.length&&await D(f,[f==="npm"?"install":"add","-D",...r.devDependencies],{cwd:t});let O=await V(r.files);G(O.filenames,O.contents)}m.succeed("Done."),process.exit(0)});import fe from"figlet";function W(e){let n=fe.textSync(e,{font:"Small"});console.log(`
${n}
`)}import R from"chalk";import{Command as ue}from"commander";import k from"fs";import d from"ora";import L from"path";import he from"prompts";import*as $ from"semver";var g={info:e=>R.blueBright(e),success:e=>R.greenBright(e),error:e=>R.redBright(e),warning:e=>R.yellowBright(e)},ye=`
  this alias will be added to your ${g.success("components.json")} file

    ${g.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,l={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${g.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${g.success("components.json")}.${ye}  Proceed?`,configurationWritten:`Configuration written to ${g.success("components.json")}.`,operationAborted:`${g.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${g.success("components.json")} file in your project root is required before running this command`},we=()=>{let e=v();return e?.aliases||(d(l.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},Y=new ue().name("init").description(l.greet).action(()=>{W("Initializing:"),we()&&(d(`trnsprncy alias already exists in ${g.success("components.json")}`).fail(),process.exit(1)),Pe().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(d(g.error(l.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(d(l.meetsRequirements).succeed(),xe())}).catch(e=>{d(`Error checking required packages: ${e}`).fail()})}),K=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),I={next:"^14.0.1"};async function ke(){let e=L.join(process.cwd(),"package.json"),n=JSON.parse(k.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let o in n.dependencies)n.dependencies[o]=K(n.dependencies[o]);return n.dependencies}async function xe(){let{confirmation:e}=await he({type:"toggle",name:"confirmation",message:l.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){k.existsSync(x)||(d(l.shadcnRequired).fail(),process.exit(1));let n=v();n.aliases.trnsprncy=b,k.writeFileSync(x,JSON.stringify(n,null,2));let o=y()?"true":"false",t=w[o];k.existsSync(t)||k.mkdirSync(t,{recursive:!0}),console.log(t);let c=L.join(t,".gitkeep");k.writeFile(c,"",s=>{s&&console.error("Error writing file:",s)}),d(l.configurationWritten).succeed()}else d(l.operationAborted).fail()}async function Pe(){let e=await ke();if(!Object.keys(e)?.length)return d(l.noDependencies).fail(),{missingPackages:Object.keys(I),outdatedPackages:[]};let n=[],o=[];d("checking for required packages...").succeed();for(let t in I){let c=e[t];if(!c)n.push(t);else{let s=K(I[t]),i=c;i||n.push(t),!$.satisfies(i,s)&&$.lt(i,s)&&o.push({packageName:t,installedVersion:i,requiredVersion:s})}}return{missingPackages:n,outdatedPackages:o}}import Se from"fs";import Q from"path";import{fileURLToPath as Ce}from"url";var be=Q.dirname(Ce(import.meta.url)),X={getContent(){let e=Q.resolve(be,"../","package.json");return JSON.parse(Se.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as je}from"commander";(async()=>{let e=new je;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(X.version,"-v, --version","display the version number"),e.addCommand(Y).addCommand(U).addCommand(J),e.parse()})();
