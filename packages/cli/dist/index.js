#! /usr/bin/env node
var I=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as ee}from"commander";import ne from"chalk-animation";var q=new ee().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=ne.rainbow(I);setTimeout(()=>{e.stop()},5e3)});import{z as i}from"zod";var A=i.object({name:i.string(),dependencies:i.array(i.string()).optional(),devDependencies:i.array(i.string()).optional(),uiDependencies:i.array(i.string()).optional(),registryDependencies:i.array(i.string()).optional(),files:i.array(i.string()),type:i.enum(["components:ui","components:component","components:example","components:library"])}),x=i.array(A),te=A.extend({files:i.array(i.object({name:i.string(),content:i.string()}))}),Te=i.array(te);import P from"fs";import S from"path";var C="@/components/ui/trnsprncy",k=S.join(process.cwd(),"components.json");function v(){return P.existsSync(k)?JSON.parse(P.readFileSync(k,"utf-8")):{}}var D=S.join(process.cwd(),"tsconfig.json");function oe(){return P.existsSync(D)?JSON.parse(P.readFileSync(D,"utf-8")):{}}function u(){try{let n=oe().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var h={true:S.join(process.cwd(),"/src",C.replace("@","")),false:S.join(process.cwd(),C.replace("@",""))};import{detect as re}from"@antfu/ni";async function F(e){let n=await re({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}import se from"fs";import{HttpsProxyAgent as ie}from"https-proxy-agent";import V from"node-fetch";import ae from"path";var ce="https://raw.githubusercontent.com/trnsprncy/ui/main",M=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",pe=process.env.https_proxy?new ie(process.env.https_proxy):void 0;async function $(){try{return await(await V(`${M}/registry/index.json`,{agent:pe})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${M}.`)}}async function N(e){let n=x.parse(await $()),r=new Set(e);e||(console.log("No components selected"),process.exit(1));let t=[];for(let c of e){let s=n.find(a=>a.name===c);if(!s){console.log(`Component ${c} not found in registry`);continue}if(t.push(s),s.registryDependencies){let a=await N(s.registryDependencies);for(let w of a)r.has(w.name)||t.push(...a)}}return t}async function z(e){try{let n=[],r=[];for(let t of e){let c=`${ce}/packages/site/src/registry/alpha/${t}`,s=t.substring(t.lastIndexOf("/")+1),a=await V(c);if(!a.ok)throw new Error(`Failed to fetch file '${t}': ${a.statusText}`);let w=await a.text();n.push(s),r.push(w)}return{filenames:n,contents:r}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function G(e,n){let r=u()?"true":"false",t=h[r];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((c,s)=>{let a=ae.join(t,c);se.writeFileSync(a,n[s],"utf8")})}catch(c){console.error("Error creating files:",c)}}import b from"chalk";import{Command as me}from"commander";import H from"fs";import{execa as E}from"execa";import B from"ora";import de from"path";import O from"prompts";import{z as l}from"zod";var ge={info:e=>b.cyan.underline(e),success:e=>b.greenBright(e),error:e=>b.redBright(e),warning:e=>b.yellowBright(e)},le=l.object({components:l.array(l.string()).optional(),yes:l.boolean(),overwrite:l.boolean(),cwd:l.string(),all:l.boolean(),path:l.string().optional()}),U=new me().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let r=le.parse({components:e,...n}),t=de.resolve(r.cwd),c=x.parse(await $()),s=r.all?c.map(o=>o.name):r.components;if(!r.components?.length){let{components:o}=await O({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:c.map(g=>({title:g.name,value:g.name,selected:r.all?!0:r.components?.includes(g.name)}))});s=o}s?.length||(B(ge.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let a=await N(s);if(!r.yes){let{proceed:o}=await O({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});o||process.exit(0)}let w=u()?"true":"false",_=h[w];H.existsSync(_+"/.gitkeep")&&H.unlink(_+"/.gitkeep",o=>{o&&console.error("Error deleting file:",o)});let f=B("Installing components...").start();for(let o of a){f.text=`Installing ${o.name}...`;let g=await F(t);if(o.uiDependencies?.length){f.stop();let{proceed:Z}=await O({type:"confirm",name:"proceed",message:`${o.name} requires the following shadcn-ui components
-->${o.uiDependencies.join(`
-->`)}
   Proceed?`,initial:!0});Z?(f.start(`installing ${o.uiDependencies.join(", ")} for ${o.name}...`),await E("npx",["shadcn-ui@latest","add",...o.uiDependencies,"--overwrite"],{cwd:t}),f.text=`Installing ${o.name}...`):(f.fail(`you need (${o.uiDependencies.join(", ")}) for ${o.name}!`),process.exit(0))}o.dependencies?.length&&await E(g,[g==="npm"?"install":"add",...o.dependencies],{cwd:t}),o.devDependencies?.length&&await E(g,[g==="npm"?"install":"add","-D",...o.devDependencies],{cwd:t});let J=await z(o.files);G(J.filenames,J.contents)}f.succeed("Done."),process.exit(0)});import fe from"figlet";function W(e){let n=fe.textSync(e,{font:"Small"});console.log(`
${n}
`)}import j from"chalk";import{Command as ue}from"commander";import y from"fs";import p from"ora";import L from"path";import he from"prompts";import*as R from"semver";var m={info:e=>j.blueBright(e),success:e=>j.greenBright(e),error:e=>j.redBright(e),warning:e=>j.yellowBright(e)},ye=`
  this alias will be added to your ${m.success("components.json")} file

    ${m.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,d={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${m.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${m.success("components.json")}.${ye}  Proceed?`,configurationWritten:`Configuration written to ${m.success("components.json")}.`,operationAborted:`${m.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${m.success("components.json")} file in your project root is required before running this command`},we=()=>{let e=v();return e?.aliases||(p(d.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},Y=new ue().name("init").description(d.greet).action(()=>{W("Initializing:"),we()&&(p(`trnsprncy alias already exists in ${m.success("components.json")}`).fail(),process.exit(1)),Pe().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(p(m.error(d.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(p(d.meetsRequirements).succeed(),xe())}).catch(e=>{p(`Error checking required packages: ${e}`).fail()})}),K=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),T={next:"^14.0.1"};async function ke(){let e=L.join(process.cwd(),"package.json"),n=JSON.parse(y.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let r in n.dependencies)n.dependencies[r]=K(n.dependencies[r]);return n.dependencies}async function xe(){let{confirmation:e}=await he({type:"toggle",name:"confirmation",message:d.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){y.existsSync(k)||(p(d.shadcnRequired).fail(),process.exit(1));let n=v();n.aliases.trnsprncy=C,y.writeFileSync(k,JSON.stringify(n,null,2));let r=u()?"true":"false",t=h[r];y.existsSync(t)||y.mkdirSync(t,{recursive:!0}),console.log(t);let c=L.join(t,".gitkeep");y.writeFile(c,"",s=>{s&&console.error("Error writing file:",s)}),p(d.configurationWritten).succeed()}else p(d.operationAborted).fail()}async function Pe(){let e=await ke();if(!Object.keys(e)?.length)return p(d.noDependencies).fail(),{missingPackages:Object.keys(T),outdatedPackages:[]};let n=[],r=[];p("checking for required packages...").succeed();for(let t in T){let c=e[t];if(!c)n.push(t);else{let s=K(T[t]),a=c;a||n.push(t),!R.satisfies(a,s)&&R.lt(a,s)&&r.push({packageName:t,installedVersion:a,requiredVersion:s})}}return{missingPackages:n,outdatedPackages:r}}import Se from"fs";import Q from"path";import{fileURLToPath as Ce}from"url";var be=Q.dirname(Ce(import.meta.url)),X={getContent(){let e=Q.resolve(be,"../","package.json");return JSON.parse(Se.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as je}from"commander";(async()=>{let e=new je;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(X.version,"-v, --version","display the version number"),e.addCommand(Y).addCommand(U).addCommand(q),e.parse()})();
