#! /usr/bin/env node
import{Command as _}from"commander";import V from"chalk-animation";var C=new _().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{z(),process.exit(0)}),z=()=>V.rainbow("hello");import{z as o}from"zod";var S=o.object({name:o.string(),dependencies:o.array(o.string()).optional(),devDependencies:o.array(o.string()).optional(),uiDependencies:o.array(o.string()).optional(),registryDependencies:o.array(o.string()).optional(),files:o.array(o.string()),type:o.enum(["components:ui","components:component","components:example","components:library"])}),d=o.array(S),D=S.extend({files:o.array(o.object({name:o.string(),content:o.string()}))}),le=o.array(D);import{HttpsProxyAgent as B}from"https-proxy-agent";import b from"node-fetch";var G="https://raw.githubusercontent.com/trnsprncy/ui/main",R=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",U=process.env.https_proxy?new B(process.env.https_proxy):void 0;async function P(){try{return await(await b(`${R}/registry/index.json`,{agent:U})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${R}.`)}}async function j(e){let n=d.parse(await P());e||(console.log("no components selected"),process.exit(1));let t=[];for(let s of e){let r=n.find(a=>a.name===s);if(r)t.push(r);else{console.log(`Component ${s} not found in registry`);continue}}return t}function $(e){return e.map(t=>t.files).flat()}async function v(e){try{let n=[];for(let t of e){let s=`${G}/packages/site/src/registry/alpha/${t}`,r=await b(s);if(!r.ok)throw new Error(`Failed to fetch file '${t}': ${r.statusText}`);let a=await r.text();n.push(a)}return n}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}import l from"chalk";import{Command as W}from"commander";import H from"ora";import L from"prompts";import{z as f}from"zod";var M={info:e=>l.cyan.underline(e),success:e=>l.greenBright(e),error:e=>l.redBright(e),warning:e=>l.yellowBright(e)},K=f.object({components:f.array(f.string()).optional(),all:f.boolean()}),q=new W().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-a, --all","add all available components",!1).action(async(e,n)=>{let t=K.parse({components:e,...n}),s=d.parse(await P()),r=t.all?s.map(k=>k.name):t.components;if(!t.components?.length){let{components:k}=await L({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:s.map(x=>({title:x.name,value:x.name,selected:t.all?!0:t.components?.includes(x.name)}))});r=k}r?.length||(H(M.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let a=await j(r),p=$(a),F=await v(p);console.log(F),process.exit(0)});import N from"path";import g from"fs";import{Command as Y}from"commander";import*as y from"semver";import u from"chalk";import i from"ora";import X from"prompts";import Q from"figlet";function J(e){let n=Q.textSync(e,{font:"Small"});console.log(`
${n}
`)}var c={info:e=>u.blueBright(e),success:e=>u.greenBright(e),error:e=>u.redBright(e),warning:e=>u.yellowBright(e)},Z="@/components/ui/trnsprncy",ee=`
  this alias will be added to your ${c.success("components.json")} file

    ${c.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,m={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${c.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${c.success("components.json")}.${ee}  Proceed?`,configurationWritten:`Configuration written to ${c.success("components.json")}.`,operationAborted:`${c.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${c.success("components.json")} file in your project root is required before running this command`},h=N.join(process.cwd(),"components.json");function A(){return g.existsSync(h)?JSON.parse(g.readFileSync(h,"utf-8")):{}}var ne=()=>{let e=A();return e?.aliases||(i(m.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},E=new Y().name("init").description(m.greet).action(()=>{J("Initializing:"),ne()&&(i(`trnsprncy alias already exists in ${c.success("components.json")}`).fail(),process.exit(1)),se().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(i(c.error(m.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(i(m.meetsRequirements).succeed(),oe())}).catch(e=>{i(`Error checking required packages: ${e}`).fail()})}),I=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),w={next:"^14.0.1"};async function te(){let e=N.join(process.cwd(),"package.json"),n=JSON.parse(g.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let t in n.dependencies)n.dependencies[t]=I(n.dependencies[t]);return n.dependencies}async function oe(){let{confirmation:e}=await X({type:"toggle",name:"confirmation",message:m.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){g.existsSync(h)||(i(m.shadcnRequired).fail(),process.exit(1));let n=A();n.aliases.trnsprncy=Z,g.writeFileSync(h,JSON.stringify(n,null,2)),i(m.configurationWritten).succeed()}else i(m.operationAborted).fail()}async function se(){let e=await te();if(!Object.keys(e)?.length)return i(m.noDependencies).fail(),{missingPackages:Object.keys(w),outdatedPackages:[]};let n=[],t=[];i("checking for required packages...").succeed();for(let s in w){let r=e[s];if(!r)n.push(s);else{let a=I(w[s]),p=r;p||n.push(s),!y.satisfies(p,a)&&y.lt(p,a)&&t.push({packageName:s,installedVersion:p,requiredVersion:a})}}return{missingPackages:n,outdatedPackages:t}}import re from"fs";import O from"path";import{fileURLToPath as ie}from"url";var ae=O.dirname(ie(import.meta.url)),T={getContent(){let e=O.resolve(ae,"../","package.json");return JSON.parse(re.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as ce}from"commander";(async()=>{let e=new ce;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(T.version,"-v, --version","display the version number"),e.addCommand(E).addCommand(q).addCommand(C),e.parse()})();
