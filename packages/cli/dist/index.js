#! /usr/bin/env node
var I=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as oe}from"commander";import re from"chalk-animation";var A=new oe().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=re.rainbow(I);setTimeout(()=>{e.stop()},5e3)});import{z as s}from"zod";var F=s.object({name:s.string(),dependencies:s.array(s.string()).optional(),devDependencies:s.array(s.string()).optional(),uiDependencies:s.array(s.string()).optional(),fileDependencies:s.array(s.string()).optional(),registryDependencies:s.array(s.string()).optional(),files:s.array(s.string()),type:s.enum(["components:demo","components:extension","components:example","components:library"])}),k=s.array(F),se=F.extend({files:s.array(s.object({name:s.string(),content:s.string()}))}),Te=s.array(se);import P from"fs";import S from"path";var C="@/components/ui/trnsprncy",y=S.join(process.cwd(),"components.json");function N(){return P.existsSync(y)?JSON.parse(P.readFileSync(y,"utf-8")):{}}var z=S.join(process.cwd(),"tsconfig.json");function ie(){return P.existsSync(z)?JSON.parse(P.readFileSync(z,"utf-8")):{}}function b(){try{let n=ie().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var x={true:S.join(process.cwd(),"/src",C.replace("@","")),false:S.join(process.cwd(),C.replace("@",""))},ae=b()?"true":"false",w=x[ae];import{detect as ce}from"@antfu/ni";async function M(e){let n=await ce({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}var V=[{name:"banner-content",files:["library/banner/banner-content.tsx"],type:"components:library"},{name:"banner-shell",dependencies:["@radix-ui/react-slot","@trnsprncy/oss"],registryDependencies:["banner-content"],fileDependencies:["utils","logic"],files:["library/banner/banner-shell.tsx","library/banner/logic/banner-trigger.tsx","library/banner/logic/banner-opt-base.tsx","library/banner/logic/banner-options.tsx","library/banner/logic/bare-banner-trigger.tsx","library/banner/logic/categorized-options.tsx","library/banner/utils/constants.ts","library/banner/utils/use-lock-body-scroll.ts"],type:"components:library"},{name:"banner-switch",registryDependencies:["switch-w-thumb"],files:["library/banner/banner-switch.tsx"],type:"components:library"},{name:"switch-w-thumb",dependencies:["@radix-ui/react-switch"],files:["library/banner/switch-w-thumb.tsx"],type:"components:library"},{name:"trnsprncy-button",registryDependencies:["banner-options"],uiDependencies:["button","popover"],files:["library/banner/trnsprncy-button.tsx"],type:"components:library"}];import pe from"fs";import{HttpsProxyAgent as me}from"https-proxy-agent";import H from"node-fetch";import le from"path";var de="https://raw.githubusercontent.com/trnsprncy/ui/main",G=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",ge=process.env.https_proxy?new me(process.env.https_proxy):void 0;async function B(){try{return await(await H(`${G}/registry/index.json`,{agent:ge})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${G}.`)}}async function O(e){let n=k.parse(V),r=new Set(e);e||(console.log("No components selected"),process.exit(1));let o=[];for(let c of e){let a=n.find(i=>i.name===c);if(!a){console.log(`Component ${c} not found in registry`);continue}if(o.push(a),a.registryDependencies){let i=await O(a.registryDependencies);for(let h of i)r.has(h.name)||o.push(...i)}}return o}async function U(e){try{let n=[],r=[];for(let o of e){let c=`${de}/packages/site/src/registry/alpha/${o}`,a=o.substring(o.indexOf("/",o.indexOf("/")+1)),i=await H(c);if(!i.ok)throw new Error(`Failed to fetch file '${o}': ${i.statusText}`);let h=await i.text();n.push(a),r.push(h)}return{filenames:n,contents:r}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function W(e,n){let r=b()?"true":"false",o=x[r];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((c,a)=>{let i=le.join(o,c);pe.writeFileSync(i,n[a],"utf8")})}catch(c){console.error("Error creating files:",c)}}import j from"chalk";import{Command as fe}from"commander";import{execa as E}from"execa";import _ from"fs";import L from"ora";import Y from"path";import J from"prompts";import{z as g}from"zod";var ue={info:e=>j.cyan.underline(e),success:e=>j.greenBright(e),error:e=>j.redBright(e),warning:e=>j.yellowBright(e)},he=g.object({components:g.array(g.string()).optional(),yes:g.boolean(),overwrite:g.boolean(),cwd:g.string(),all:g.boolean(),path:g.string().optional()}),K=new fe().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let r=he.parse({components:e,...n}),o=Y.resolve(r.cwd),c=k.parse(await B()),a=r.all?c.map(t=>t.name):r.components;if(!r.components?.length){let{components:t}=await J({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:c.map(d=>({title:d.name,value:d.name,selected:r.all?!0:r.components?.includes(d.name)}))});a=t}a?.length||(L(ue.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let i=await O(a);if(!r.yes){let{proceed:t}=await J({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});t||process.exit(0)}let h=b()?"true":"false",$=x[h];_.existsSync($+"/.gitkeep")&&_.unlink($+"/.gitkeep",t=>{t&&console.error("Error deleting file:",t)});let f=L("Installing components...").start();for(let t of i){f.text=`Installing ${t.name}...`;let d=await M(o);if(t.uiDependencies?.length){f.stop();let{proceed:D}=await J({type:"confirm",name:"proceed",message:`${t.name} requires the following shadcn-ui components
-->${t.uiDependencies.join(`
-->`)}
   Proceed?`,initial:!0});D?(f.start(`installing ${t.uiDependencies.join(", ")} for ${t.name}...`),await E("npx",["shadcn-ui@latest","add",...t.uiDependencies,"--overwrite"],{cwd:o}),f.text=`Installing ${t.name}...`):(f.fail(`you need (${t.uiDependencies.join(", ")}) for ${t.name}!`),process.exit(0))}if(t.dependencies?.length&&await E(d,[d==="npm"?"install":"add",...t.dependencies],{cwd:o}),t.devDependencies?.length&&await E(d,[d==="npm"?"install":"add","-D",...t.devDependencies],{cwd:o}),t.fileDependencies)for(let D of t.fileDependencies)_.mkdirSync(Y.join($,D),{recursive:!0});let q=await U(t.files);W(q.filenames,q.contents)}f.succeed("Done."),process.exit(0)});import ye from"figlet";function Q(e){let n=ye.textSync(e,{font:"Small"});console.log(`
${n}
`)}import R from"chalk";import{Command as be}from"commander";import u from"fs";import p from"ora";import X from"path";import xe from"prompts";import*as v from"semver";var m={info:e=>R.blueBright(e),success:e=>R.greenBright(e),error:e=>R.redBright(e),warning:e=>R.yellowBright(e)},we=`
  this alias will be added to your ${m.success("components.json")} file

    ${m.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,l={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${m.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${m.success("components.json")}.${we}  Proceed?`,configurationWritten:`Configuration written to ${m.success("components.json")}.`,operationAborted:`${m.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${m.success("components.json")} file in your project root is required before running this command`},ke=()=>{let e=N();return e?.aliases||(p(l.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},Z=new be().name("init").description(l.greet).action(()=>{Q("Initializing:"),ke()&&(p(`trnsprncy alias already exists in ${m.success("components.json")}`).fail(),process.exit(1)),Ce().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(p(m.error(l.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(p(l.meetsRequirements).succeed(),Se())}).catch(e=>{p(`Error checking required packages: ${e}`).fail()})}),ee=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),T={next:"^14.0.1"};async function Pe(){let e=X.join(process.cwd(),"package.json"),n=JSON.parse(u.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let r in n.dependencies)n.dependencies[r]=ee(n.dependencies[r]);return n.dependencies}async function Se(){let{confirmation:e}=await xe({type:"toggle",name:"confirmation",message:l.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){u.existsSync(y)||(p(l.shadcnRequired).fail(),process.exit(1));let n=N();n.aliases.trnsprncy=C,u.writeFileSync(y,JSON.stringify(n,null,2)),u.existsSync(w)||u.mkdirSync(w,{recursive:!0}),console.log(w);let r=X.join(w,".gitkeep");u.writeFile(r,"",o=>{o&&console.error("Error writing file:",o)}),p(l.configurationWritten).succeed()}else p(l.operationAborted).fail()}async function Ce(){let e=await Pe();if(!Object.keys(e)?.length)return p(l.noDependencies).fail(),{missingPackages:Object.keys(T),outdatedPackages:[]};let n=[],r=[];p("checking for required packages...").succeed();for(let o in T){let c=e[o];if(!c)n.push(o);else{let a=ee(T[o]),i=c;i||n.push(o),!v.satisfies(i,a)&&v.lt(i,a)&&r.push({packageName:o,installedVersion:i,requiredVersion:a})}}return{missingPackages:n,outdatedPackages:r}}import je from"fs";import ne from"path";import{fileURLToPath as Re}from"url";var ve=ne.dirname(Re(import.meta.url)),te={getContent(){let e=ne.resolve(ve,"../","package.json");return JSON.parse(je.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as $e}from"commander";(async()=>{let e=new $e;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(te.version,"-v, --version","display the version number"),e.addCommand(Z).addCommand(K).addCommand(A),e.parse()})();
