#! /usr/bin/env node
var q=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                   Wait list now open!
                               https://trnsprncy.vercel.app
`;import{Command as ne}from"commander";import te from"chalk-animation";var F=new ne().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=te.rainbow(q);setTimeout(()=>{e.stop()},5e3)});import{z as i}from"zod";var z=i.object({name:i.string(),dependencies:i.array(i.string()).optional(),devDependencies:i.array(i.string()).optional(),uiDependencies:i.array(i.string()).optional(),fileDependencies:i.array(i.string()).optional(),registryDependencies:i.array(i.string()).optional(),files:i.array(i.string()),type:i.enum(["components:demo","components:extension","components:example","components:library"])}),x=i.array(z),re=z.extend({files:i.array(i.object({name:i.string(),content:i.string()}))}),Oe=i.array(re);import w from"fs";import k from"path";var P="@/components/ui/trnsprncy",h=k.join(process.cwd(),"components.json");function j(){return w.existsSync(h)?JSON.parse(w.readFileSync(h,"utf-8")):{}}var M=k.join(process.cwd(),"tsconfig.json");function oe(){return w.existsSync(M)?JSON.parse(w.readFileSync(M,"utf-8")):{}}function v(){try{let n=oe().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var $={true:k.join(process.cwd(),"/src",P.replace("@","")),false:k.join(process.cwd(),P.replace("@",""))},ie=v()?"true":"false",m=$[ie];import{detect as se}from"@antfu/ni";async function U(e){let n=await se({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}var V=[{name:"banner-content",dependencies:[],registryDependencies:[],uiDependencies:[],files:["library/banner/banner-content.tsx"],type:"components:library"},{name:"banner-shell",dependencies:["@radix-ui/react-slot","@trnsprncy/oss"],registryDependencies:["banner-content","banner-trigger"],uiDependencies:[],files:["library/banner/banner-shell.tsx"],type:"components:library"},{name:"banner-switch",dependencies:[],registryDependencies:["switch-w-thumb"],uiDependencies:[],files:["library/banner/banner-switch.tsx"],type:"components:library"},{name:"banner-trigger",dependencies:["@trnsprncy/oss"],registryDependencies:[],fileDependencies:["utils"],uiDependencies:["button"],files:["library/banner/banner-trigger.tsx","library/banner/utils/triggers.ts"],type:"components:library"},{name:"bare-banner-trigger",dependencies:["@trnsprncy/oss"],registryDependencies:[],fileDependencies:["utils"],uiDependencies:["toast","button"],files:["library/banner/bare-banner-trigger.tsx","library/banner/utils/triggers.ts"],type:"components:library"},{name:"switch-w-thumb",dependencies:["@radix-ui/react-switch"],registryDependencies:[],uiDependencies:[],files:["library/banner/switch-w-thumb.tsx"],type:"components:library"},{name:"trnsprncy-button",fileDependencies:["logic"],uiDependencies:["button","popover"],files:["library/banner/trnsprncy-button.tsx","library/banner/logic/banner-options.tsx"],type:"components:library"},{name:"categorized-options",dependencies:["@trnsprncy/oss"],registryDependencies:["banner-switch"],uiDependencies:["accordion"],files:["library/banner/categorized-options.tsx"],type:"components:library"},{name:"fake-banner-demo",dependencies:["@trnsprncy/oss"],registryDependencies:["banner-shell","trnsprncy-button","banner-trigger"],fileDependencies:["logic","demo"],files:["demo/fake-banner-demo.tsx","library/banner/logic/banner-opt-base.tsx"],type:"components:demo"}];import G from"fs";import{HttpsProxyAgent as ae}from"https-proxy-agent";import ce from"node-fetch";import pe from"path";var me="https://raw.githubusercontent.com/trnsprncy/ui/main",de=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",Le=process.env.https_proxy?new ae(process.env.https_proxy):void 0;async function E(){try{return await V}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${de}.`)}}async function N(e){let n=x.parse(await E()),o=new Set(e);e||(console.log("No components selected"),process.exit(1));let r=[];for(let p of e){let s=n.find(a=>a.name===p);if(!s){console.log(`Component ${p} not found in registry`);continue}if(r.push(s),s.registryDependencies){let a=await N(s.registryDependencies);for(let c of a)o.has(c.name)||r.push(...a)}}return r}async function H(e){try{let n=[],o=[];for(let r of e){let p=`${me}/packages/site/src/registry/alpha/${r}`,s=r.indexOf("/",r.indexOf("/")+1),a=r.substring(s),c=await ce(p);if(!c.ok)throw new Error(`Failed to fetch file '${r}': ${c.statusText}`);let t=await c.text();n.push(a),o.push(t)}return{filenames:n,contents:o}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function W(e,n){let o=v()?"true":"false",r=$[o];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((p,s)=>{let a=pe.join(r,p);if(!G.existsSync(a)){let c=a;G.writeFileSync(c,n[s],"utf8")}})}catch(p){console.error("Error creating files:",p)}}import S from"chalk";import{Command as le}from"commander";import{execa as O}from"execa";import D from"fs";import B from"ora";import _ from"path";import T from"prompts";import{z as u}from"zod";var J={info:e=>S.cyan.underline(e),success:e=>S.greenBright(e),error:e=>S.redBright(e),warning:e=>S.yellowBright(e)},ge=u.object({components:u.array(u.string()).optional(),yes:u.boolean(),overwrite:u.boolean(),cwd:u.string(),all:u.boolean(),path:u.string().optional()}),L=new le().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let o=ge.parse({components:e,...n}),r=_.resolve(o.cwd),p=x.parse(await E()),s=o.all?p.map(t=>t.name):o.components;if(!o.components?.length){let{components:t}=await T({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:p.map(f=>({title:f.name,value:f.name,selected:o.all?!0:o.components?.includes(f.name)}))});s=t}s?.length||(B(J.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let a=await N(s);if(!o.yes){let{proceed:t}=await T({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});t||process.exit(0)}D.existsSync(m+"/.gitkeep")&&D.unlink(m+"/.gitkeep",t=>{t&&console.error("Error deleting file:",t)});let c=B("Installing components...").start();for(let t of a){c.text=`Installing ${t.name}...`;let f=await U(r);if(t.uiDependencies?.length){c.stop();let{proceed:b}=await T({type:"confirm",name:"proceed",message:`${J.info(t.name)} requires the following shadcn-ui components ${J.info(t.uiDependencies.join(", "))} Proceed?`,initial:!0});b?(c.start(`installing ${t.uiDependencies.join(", ")} for ${t.name}...`),await O("npx",["shadcn-ui@latest","add",...t.uiDependencies,"--overwrite"],{cwd:r}),c.text=`Installing ${t.name}...`):(c.fail(`you need (${t.uiDependencies.join(", ")}) for ${t.name}!`),process.exit(0))}if(t.dependencies?.length&&await O(f,[f==="npm"?"install":"i",...t.dependencies],{cwd:r}),t.devDependencies?.length&&await O(f,[f==="npm"?"install":"add","-D",...t.devDependencies],{cwd:r}),t.fileDependencies)for(let b of t.fileDependencies)D.existsSync(_.join(m,b))||D.mkdirSync(_.join(m,b),{recursive:!0});let I=await H(t.files);W(I.filenames,I.contents),c.succeed(`installed ${t.name}`)}c.succeed("Done."),process.exit(0)});import fe from"figlet";function Y(e){let n=fe.textSync(e,{font:"Small"});console.log(`
${n}
`)}import C from"chalk";import{Command as ue}from"commander";import y from"fs";import d from"ora";import K from"path";import ye from"prompts";import*as R from"semver";var l={info:e=>C.blueBright(e),success:e=>C.greenBright(e),error:e=>C.redBright(e),warning:e=>C.yellowBright(e)},he=`
  this alias will be added to your ${l.success("components.json")} file

    ${l.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,g={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${l.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${l.success("components.json")}.${he}  Proceed?`,configurationWritten:`Configuration written to ${l.success("components.json")}.`,operationAborted:`${l.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${l.success("components.json")} file in your project root is required before running this command`},be=()=>{let e=j();return e?.aliases||(d(g.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},Q=new ue().name("init").description(g.greet).action(()=>{Y("Initializing:"),be()&&(d(`trnsprncy alias already exists in ${l.success("components.json")}`).fail(),process.exit(1)),ke().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(d(l.error(g.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(d(g.meetsRequirements).succeed(),we())}).catch(e=>{d(`Error checking required packages: ${e}`).fail()})}),X=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),A={next:"^14.0.1"};async function xe(){let e=K.join(process.cwd(),"package.json"),n=JSON.parse(y.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let o in n.dependencies)n.dependencies[o]=X(n.dependencies[o]);return n.dependencies}async function we(){let{confirmation:e}=await ye({type:"toggle",name:"confirmation",message:g.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){y.existsSync(h)||(d(g.shadcnRequired).fail(),process.exit(1));let n=j();n.aliases.trnsprncy=P,y.writeFileSync(h,JSON.stringify(n,null,2)),y.existsSync(m)||y.mkdirSync(m,{recursive:!0}),console.log(m);let o=K.join(m,".gitkeep");y.writeFile(o,"",r=>{r&&console.error("Error writing file:",r)}),d(g.configurationWritten).succeed()}else d(g.operationAborted).fail()}async function ke(){let e=await xe();if(!Object.keys(e)?.length)return d(g.noDependencies).fail(),{missingPackages:Object.keys(A),outdatedPackages:[]};let n=[],o=[];d("checking for required packages...").succeed();for(let r in A){let p=e[r];if(!p)n.push(r);else{let s=X(A[r]),a=p;a||n.push(r),!R.satisfies(a,s)&&R.lt(a,s)&&o.push({packageName:r,installedVersion:a,requiredVersion:s})}}return{missingPackages:n,outdatedPackages:o}}import Pe from"fs";import Z from"path";import{fileURLToPath as Se}from"url";var De=Z.dirname(Se(import.meta.url)),ee={getContent(){let e=Z.resolve(De,"../","package.json");return JSON.parse(Pe.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as Ce}from"commander";(async()=>{let e=new Ce;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(ee.version,"-v, --version","display the version number"),e.addCommand(Q).addCommand(L).addCommand(F),e.parse()})();
