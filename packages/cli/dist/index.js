#! /usr/bin/env node
var q=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                   Wait list now open!
                               https://trnsprncy.vercel.app
`;import{Command as ne}from"commander";import te from"chalk-animation";var F=new ne().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=te.rainbow(q);setTimeout(()=>{e.stop()},5e3)});import{z as s}from"zod";var M=s.object({name:s.string(),dependencies:s.array(s.string()).optional(),devDependencies:s.array(s.string()).optional(),uiDependencies:s.array(s.string()).optional(),fileDependencies:s.array(s.string()).optional(),registryDependencies:s.array(s.string()).optional(),files:s.array(s.string()),type:s.enum(["components:demo","components:extension","components:example","components:library"])}),x=s.array(M),oe=M.extend({files:s.array(s.object({name:s.string(),content:s.string()}))}),_e=s.array(oe);import k from"fs";import P from"path";var S="@/components/ui/trnsprncy",y=P.join(process.cwd(),"components.json");function R(){return k.existsSync(y)?JSON.parse(k.readFileSync(y,"utf-8")):{}}var U=P.join(process.cwd(),"tsconfig.json");function re(){return k.existsSync(U)?JSON.parse(k.readFileSync(U,"utf-8")):{}}function $(){try{let n=re().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var E={true:P.join(process.cwd(),"/src",S.replace("@","")),false:P.join(process.cwd(),S.replace("@",""))},se=$()?"true":"false",m=E[se];import{detect as ie}from"@antfu/ni";async function V(e){let n=await ie({programmatic:!0,cwd:e});return n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}import ae from"fs";import{HttpsProxyAgent as ce}from"https-proxy-agent";import G from"node-fetch";import pe from"path";var me="https://raw.githubusercontent.com/trnsprncy/ui/main",z=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",de=process.env.https_proxy?new ce(process.env.https_proxy):void 0;async function N(){try{return await(await G(`${z}/registry/index.json`,{agent:de})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${z}.`)}}async function O(e){let n=x.parse(await N()),r=new Set(e);e||(console.log("No components selected"),process.exit(1));let o=[];for(let c of e){let i=n.find(a=>a.name===c);if(!i){console.log(`Component ${c} not found in registry`);continue}if(o.push(i),i.registryDependencies){let a=await O(i.registryDependencies);for(let p of a)r.has(p.name)||o.push(...a)}}return o}async function H(e){try{let n=[],r=[];for(let o of e){let c=`${me}/packages/site/src/registry/alpha/${o}`,i=o.indexOf("/",o.indexOf("/")+1),a=o.substring(i),p=await G(c);if(!p.ok)throw new Error(`Failed to fetch file '${o}': ${p.statusText}`);let t=await p.text();n.push(a),r.push(t)}return{filenames:n,contents:r}}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function W(e,n){let r=$()?"true":"false",o=E[r];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((c,i)=>{let a=pe.join(o,c);ae.writeFileSync(a,n[i],"utf8")})}catch(c){console.error("Error creating files:",c)}}import C from"chalk";import{Command as le}from"commander";import{execa as _}from"execa";import b from"fs";import B from"ora";import D from"path";import T from"prompts";import{z as u}from"zod";var J={info:e=>C.cyan.underline(e),success:e=>C.greenBright(e),error:e=>C.redBright(e),warning:e=>C.yellowBright(e)},ge=u.object({components:u.array(u.string()).optional(),yes:u.boolean(),overwrite:u.boolean(),cwd:u.string(),all:u.boolean(),path:u.string().optional()}),L=new le().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-y, --yes","skip confirmation prompt.",!0).option("-o, --overwrite","overwrite existing files.",!1).option("-c, --cwd <cwd>","the working directory. defaults to the current directory.",process.cwd()).option("-a, --all","add all available components",!1).option("-p, --path <path>","the path to add the component to.").action(async(e,n)=>{let r=ge.parse({components:e,...n}),o=D.resolve(r.cwd),c=x.parse(await N()),i=r.all?c.map(t=>t.name):r.components;if(!r.components?.length){let{components:t}=await T({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:c.map(f=>({title:f.name,value:f.name,selected:r.all?!0:r.components?.includes(f.name)}))});i=t}i?.length||(B(J.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let a=await O(i);if(!r.yes){let{proceed:t}=await T({type:"confirm",name:"proceed",message:"Ready to install components and dependencies. Proceed?",initial:!0});t||process.exit(0)}b.existsSync(m+"/.gitkeep")&&b.unlink(m+"/.gitkeep",t=>{t&&console.error("Error deleting file:",t)});let p=B("Installing components...").start();for(let t of a){p.text=`Installing ${t.name}...`;let f=await V(o);if(t.uiDependencies?.length){p.stop();let{proceed:w}=await T({type:"confirm",name:"proceed",message:`${J.info(t.name)} requires the following shadcn-ui components ${J.info(t.uiDependencies.join(", "))} Proceed?`,initial:!0});w?(p.start(`installing ${t.uiDependencies.join(", ")} for ${t.name}...`),await _("npx",["shadcn-ui@latest","add",...t.uiDependencies,"--overwrite"],{cwd:o}),p.text=`Installing ${t.name}...`):(p.fail(`you need (${t.uiDependencies.join(", ")}) for ${t.name}!`),process.exit(0))}if(t.dependencies?.length&&await _(f,[f==="npm"?"install":"i",...t.dependencies],{cwd:o}),t.devDependencies?.length&&await _(f,[f==="npm"?"install":"add","-D",...t.devDependencies],{cwd:o}),t.fileDependencies)for(let w of t.fileDependencies)b.existsSync(D.join(m,w))||b.mkdirSync(D.join(m,w),{recursive:!0});let I=await H(t.files);W(I.filenames,I.contents),p.succeed(`installed ${t.name}`)}p.succeed("Done."),process.exit(0)});import fe from"figlet";function Y(e){let n=fe.textSync(e,{font:"Small"});console.log(`
${n}
`)}import j from"chalk";import{Command as ue}from"commander";import h from"fs";import d from"ora";import K from"path";import he from"prompts";import*as v from"semver";var l={info:e=>j.blueBright(e),success:e=>j.greenBright(e),error:e=>j.redBright(e),warning:e=>j.yellowBright(e)},ye=`
  this alias will be added to your ${l.success("components.json")} file

    ${l.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,g={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${l.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${l.success("components.json")}.${ye}  Proceed?`,configurationWritten:`Configuration written to ${l.success("components.json")}.`,operationAborted:`${l.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${l.success("components.json")} file in your project root is required before running this command`},we=()=>{let e=R();return e?.aliases||(d(g.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},Q=new ue().name("init").description(g.greet).action(()=>{Y("Initializing:"),we()&&(d(`trnsprncy alias already exists in ${l.success("components.json")}`).fail(),process.exit(1)),Pe().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(d(l.error(g.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(d(g.meetsRequirements).succeed(),ke())}).catch(e=>{d(`Error checking required packages: ${e}`).fail()})}),X=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),A={next:"^14.0.1"};async function xe(){let e=K.join(process.cwd(),"package.json"),n=JSON.parse(h.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let r in n.dependencies)n.dependencies[r]=X(n.dependencies[r]);return n.dependencies}async function ke(){let{confirmation:e}=await he({type:"toggle",name:"confirmation",message:g.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){h.existsSync(y)||(d(g.shadcnRequired).fail(),process.exit(1));let n=R();n.aliases.trnsprncy=S,h.writeFileSync(y,JSON.stringify(n,null,2)),h.existsSync(m)||h.mkdirSync(m,{recursive:!0}),console.log(m);let r=K.join(m,".gitkeep");h.writeFile(r,"",o=>{o&&console.error("Error writing file:",o)}),d(g.configurationWritten).succeed()}else d(g.operationAborted).fail()}async function Pe(){let e=await xe();if(!Object.keys(e)?.length)return d(g.noDependencies).fail(),{missingPackages:Object.keys(A),outdatedPackages:[]};let n=[],r=[];d("checking for required packages...").succeed();for(let o in A){let c=e[o];if(!c)n.push(o);else{let i=X(A[o]),a=c;a||n.push(o),!v.satisfies(a,i)&&v.lt(a,i)&&r.push({packageName:o,installedVersion:a,requiredVersion:i})}}return{missingPackages:n,outdatedPackages:r}}import Se from"fs";import Z from"path";import{fileURLToPath as Ce}from"url";var be=Z.dirname(Ce(import.meta.url)),ee={getContent(){let e=Z.resolve(be,"../","package.json");return JSON.parse(Se.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as je}from"commander";(async()=>{let e=new je;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(ee.version,"-v, --version","display the version number"),e.addCommand(Q).addCommand(L).addCommand(F),e.parse()})();
