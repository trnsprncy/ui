#! /usr/bin/env node
var _=`
                              .:---::-------------:::::::::::                             
                            :+*++++++++++====================:                            
                            =##*::..........................                              
                           .=+*+                                                          
                            -+++======--.     .-=-                                        
                             .-==========-.   :===.                                       
                                      :#*+=   :===.                                       
                                       ****   :===.                                       
                                       +***   :===.                                       
                                       ++++   :===.                                       
                                       ====   :=--.                                       
                                       ====   :---.                                       
                                       -=--   :---.                                       
                                       ----   .:::.                                       
                                       ----   .:::.                                       
                                       -:::   .:--.                                       
                                       ::::   -++*:                                       
                                       .::-=+*####                                        
                                        .-+*#%%%+                                         
                                           .::.                                           
                                                                                          
                                  trnsprncy coming soon!
`;import{Command as W}from"commander";import M from"chalk-animation";var J=new W().name("hello-world").description("Prints a greeting message").argument("[components...]","the components to add").action(()=>{let e=M.rainbow(_);setTimeout(()=>{e.stop()},5e3)});import{z as r}from"zod";var O=r.object({name:r.string(),dependencies:r.array(r.string()).optional(),devDependencies:r.array(r.string()).optional(),uiDependencies:r.array(r.string()).optional(),registryDependencies:r.array(r.string()).optional(),files:r.array(r.string()),type:r.enum(["components:ui","components:component","components:example","components:library"])}),d=r.array(O),L=O.extend({files:r.array(r.object({name:r.string(),content:r.string()}))}),Re=r.array(L);import g from"fs";import f from"path";var u="@/components/ui/trnsprncy",l=f.join(process.cwd(),"components.json");function b(){return g.existsSync(l)?JSON.parse(g.readFileSync(l,"utf-8")):{}}var $=f.join(process.cwd(),"tsconfig.json");function Y(){return g.existsSync($)?JSON.parse(g.readFileSync($,"utf-8")):{}}function h(){try{let n=Y().compilerOptions?.paths||{};return!!n["@/*"]&&n["@/*"][0]==="./src/*"}catch(e){return console.error("Error parsing tsconfig:",e),!1}}var v=e=>{g.mkdir(e,{recursive:!0},n=>{n&&console.error("Error creating directory:",n)})},y={true:f.join(process.cwd(),"/src",u.replace("@","")),false:f.join(process.cwd(),u.replace("@",""))};import K from"fs";import{HttpsProxyAgent as Q}from"https-proxy-agent";import T from"node-fetch";import X from"path";var Z="https://raw.githubusercontent.com/trnsprncy/ui/main",E=process.env.COMPONENTS_REGISTRY_URL??"https://trnsprncy.vercel.app",ee=process.env.https_proxy?new Q(process.env.https_proxy):void 0;async function R(){try{return await(await T(`${E}/registry/index.json`,{agent:ee})).json()}catch(e){throw console.log(e),new Error(`Failed to fetch registry from ${E}.`)}}async function q(e){let n=d.parse(await R());e||(console.log("no components selected"),process.exit(1));let t=[];for(let s of e){let o=n.find(i=>i.name===s);if(o)t.push(o);else{console.log(`Component ${s} not found in registry`);continue}}return t}function A(e){return e.map(t=>t.files).flat()}async function F(e){try{let n=[];for(let t of e){let s=`${Z}/packages/site/src/registry/alpha/${t}`,o=await T(s);if(!o.ok)throw new Error(`Failed to fetch file '${t}': ${o.statusText}`);let i=await o.text();n.push(i)}return n}catch(n){throw console.error("Error fetching files from GitHub:",n),n}}function I(e,n){let t=h()?"true":"false",s=y[t];if(e.length!==n.length){console.error("Number of file names and contents must be equal");return}try{e.forEach((o,i)=>{let m=X.join(s,o+".tsx");K.writeFileSync(m,n[i],"utf8"),console.log(`File ${o} created successfully.`)})}catch(o){console.error("Error creating files:",o)}}import k from"chalk";import{Command as ne}from"commander";import te from"ora";import oe from"prompts";import{z as P}from"zod";var re={info:e=>k.cyan.underline(e),success:e=>k.greenBright(e),error:e=>k.redBright(e),warning:e=>k.yellowBright(e)},se=P.object({components:P.array(P.string()).optional(),all:P.boolean()}),V=new ne().name("add").description("Prints a greeting message").argument("[components...]","the components to add").option("-a, --all","add all available components",!1).action(async(e,n)=>{let t=se.parse({components:e,...n}),s=d.parse(await R()),o=t.all?s.map(S=>S.name):t.components;if(!t.components?.length){let{components:S}=await oe({type:"multiselect",name:"components",message:"Which components would you like to add?",hint:"Space to select. A to toggle all. Enter to submit.",instructions:!1,choices:s.map(C=>({title:C.name,value:C.name,selected:t.all?!0:t.components?.includes(C.name)}))});o=S}o?.length||(te(re.warning(`no component was requested!
  exiting.....`)).fail(),process.exit(1));let i=await q(o),m=A(i),U=await F(m);I(o,U),process.exit(0)});import ie from"figlet";function z(e){let n=ie.textSync(e,{font:"Small"});console.log(`
${n}
`)}import x from"chalk";import{Command as ae}from"commander";import N from"fs";import a from"ora";import ce from"path";import pe from"prompts";import*as w from"semver";var c={info:e=>x.blueBright(e),success:e=>x.greenBright(e),error:e=>x.redBright(e),warning:e=>x.yellowBright(e)},me=`
  this alias will be added to your ${c.success("components.json")} file

    ${c.info(`"aliases": {
        "trnsprncy": "@/components/ui/trnsprncy"
      }`)}
`,p={greet:"Hello, There! Fellow frontend Fanatic!",missingPackages:"This project does not meet the minimum requirements:",outdatedPackages:"This project does not meet the minimum requirements:",noDependencies:`No dependencies found in ${c.success("package.json")} file.`,meetsRequirements:"This project meets the minimum requirements!",writeConfiguration:`Adding configuration alias to ${c.success("components.json")}.${me}  Proceed?`,configurationWritten:`Configuration written to ${c.success("components.json")}.`,operationAborted:`${c.error("Operation aborted. Configuration not saved.")}`,componentsFileNotChanged:"Components file will not be changed.",shadcnRequired:`shadcn ${c.success("components.json")} file in your project root is required before running this command`},ge=()=>{let e=b();return e?.aliases||(a(p.shadcnRequired).fail(),process.exit(1)),!!e.aliases?.trnsprncy},D=new ae().name("init").description(p.greet).action(()=>{z("Initializing:"),ge()&&(a(`trnsprncy alias already exists in ${c.success("components.json")}`).fail(),process.exit(1)),fe().then(e=>{e.missingPackages.length||e.outdatedPackages.length?(a(c.error(p.missingPackages)).fail(),console.log("Minimum Requirements:"),e.missingPackages.length>0&&console.log("\u2192 "+e.missingPackages.join(`
`)),e.outdatedPackages.length>0&&e.outdatedPackages.forEach(n=>{console.log(`\u2192 ${n.packageName}: installed ${n.installedVersion}, required ${n.requiredVersion}`)}),process.exit(1)):(a(p.meetsRequirements).succeed(),de())}).catch(e=>{a(`Error checking required packages: ${e}`).fail()})}),G=e=>(/^\^\d+$/.test(e)&&(e=e+".0.0"),e.replace(/[^0-9.]/g,"")),j={next:"^14.0.1"};async function le(){let e=ce.join(process.cwd(),"package.json"),n=JSON.parse(N.readFileSync(e,"utf-8"));if(!Object.keys(n.dependencies)?.length)return{};for(let t in n.dependencies)n.dependencies[t]=G(n.dependencies[t]);return n.dependencies}async function de(){let{confirmation:e}=await pe({type:"toggle",name:"confirmation",message:p.writeConfiguration,initial:!0,active:"yes",inactive:"no"});if(e){N.existsSync(l)||(a(p.shadcnRequired).fail(),process.exit(1));let n=b();n.aliases.trnsprncy=u,N.writeFileSync(l,JSON.stringify(n,null,2));let t=h()?"true":"false",s=y[t];v(s),a(p.configurationWritten).succeed()}else a(p.operationAborted).fail()}async function fe(){let e=await le();if(!Object.keys(e)?.length)return a(p.noDependencies).fail(),{missingPackages:Object.keys(j),outdatedPackages:[]};let n=[],t=[];a("checking for required packages...").succeed();for(let s in j){let o=e[s];if(!o)n.push(s);else{let i=G(j[s]),m=o;m||n.push(s),!w.satisfies(m,i)&&w.lt(m,i)&&t.push({packageName:s,installedVersion:m,requiredVersion:i})}}return{missingPackages:n,outdatedPackages:t}}import ue from"fs";import H from"path";import{fileURLToPath as he}from"url";var ye=H.dirname(he(import.meta.url)),B={getContent(){let e=H.resolve(ye,"../","package.json");return JSON.parse(ue.readFileSync(e,"utf-8"))},get version(){let e=this.getContent(),{version:n}=e;return n||"0.0.0"}};import{Command as ke}from"commander";(async()=>{let e=new ke;e.name(">").description("\u26A1\uFE0F transparency/ui.").version(B.version,"-v, --version","display the version number"),e.addCommand(D).addCommand(V).addCommand(J),e.parse()})();
